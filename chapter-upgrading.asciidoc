[[upgrading]]
==  Upgrading {nxrm} 2.14 to 3.1
{inall}

[[upgrade-introduction]]
=== Introduction

In this chapter, we've isolated the most common path for upgrade from {nxrm} version 2.14 to 3.1 only. It's
important to keep in mind that there may be specific items unique to your installation and upgrade needs. As with
any major system upgrade, your organization should put strong emphasis on performance and stability. For specific
help outside this more standard path please consult our
https://support.sonatype.com/hc/en-us/sections/204911768-Installation-Upgrade-and-Compatibility[Support Knowledge
Base articles], or contact support directly (available for {pro} customers).

////
Add 'should I upgrade' section here
////

[[upgrade-types]]
=== Upgrading Within Specific Versions of {nxrm}

Since you need 2.14 (or later) and 3.1 (or later) to upgrade from one version to the other, ensure your instances 
of versions 2 and 3 are updated. To upgrade from an older version of <<upgrade-version-two,2.x to 2.14>> or from a
milestone instance of <<upgrade-version-three,3.x to 3.x>> refer to the specific sections, below.

[[upgrade-version-two]]
==== Upgrading from 2.x to 2.14
Adapt, link to 

[[upgrade-version-three]]
==== Upgrading from 3.x to 3.x

Upgrading to {nxrm} 3.x can only be performed by users who run the milestone 7 release of the repository 
manager. There are two ways to upgrade the milestone to newer version of 3.x: with the installer application or 
the distribution file. Before execution of this type of upgrade be sure to manually back up the milestone 7 data 
directory to another location. This is crucial step when upgrading to a new 3.x. Follow the steps in the support https://support.sonatype.com/hc/en-us/articles/217967608[knowledge base article].


[[upgrade-process-expectations]]
=== Upgrade Process and Expectations

While the upgrade process is underway, you can continue to use version 2. Any repository content that’s added,
updated, or deleted is picked up by version 3. However, configuration changes are not. You should not make
changes to items such as realm settings, permissions, roles, role assignments, HTTP configuration, SSL
certificates, or add new repositories. These types of configuration settings can cause the upgrade process to
fail.

[[upgraded]]
==== What Will Be Upgraded

{nxrm} represents a shift in design that was needed to support a wider set of requirements customers have
requested. As such, a number of changes occur as part of the upgrade process. This includes:

* *Component Storage Format (Files to Blobs)* - Components (artifacts) in {nxrm} 2 are stored as individual files
  on disk. {nxrm} 3 stores components as <<admin-repository-blobstores,blobs>>. The conversion process requires
  {nxrm} to iterate over every component stored in {nxrm}. This will take the bulk of the time required for
  upgrade.
* *Settings and Metadata* - Settings and some component metadata in {nxrm} 2.x are stored across many files.
  Conversely, {nxrm} 3.x loads equivalent settings into an link:http://http://orientdb.com/[OrientDB] database.

[[not-upgraded]]
==== What Will Not Be Upgraded

The file structures within your repository manager environment will differ between version 2 and 3. Consider 
re-evaluating any support tools and configurations that will not be included in your upgrade, specifically 
from 2.14 to 3.1. So, before <<upgrade-prep,preparing>> your upgrade develop a plan to replicate (or reconfigure) 
the settings listed, as they will not be upgraded automatically:

* custom branding
* virtual repositories
* Java VM Settings, including custom system properties or variables
* operating system `nexus` service scripts
* operating system optimizations, such as increasing allowable open file handles
* environment variables affecting values used to control the repository manager
* third-party or custom-developed plugins develop 
* Jetty Server XML Configuration Files
* unimplemented repository formats
* manual edits to other files under the `nexus` installation directory, such as edits to
  `nexus/WEB-INF/classes/ehcache.xml`
* custom log levels or edits to `logback.xml` configuration files (e.g.. custom log file rotation, file naming,
  log patterns)


[[upgrade-repo-support]]
==== Repository Format Support

Below is a list of repositories available in version 2 and 3 and which are support by upgrading.

* npm
* NuGet
* Site/Raw
* Maven2
////
* RubyGems
////

NOTE: For a complete list of formats supported across {nxrm} versions, please see the
link:https://support.sonatype.com/hc/en-us/articles/226495428-Nexus-Repository-Manager-Format-Language-Supportasso
ciated[KB article].

[[upgrade-prep]]
=== Preparing for an Upgrade

If you decide to upgrade, the most critical decisions you, or your organization, make should include:

* Identification of a maintenance window for version 2, allowing the upgrade to proceed without interruption
* Which of the two installation scenarios is best for your upgrade plan
* Required system storage
* What upgrade methods are available to you
* How to optimize version 2 to clear disk space, making the upgrade more performant
* Where content will be transfered when the upgrade is complete
* Understanding security setting differences between, specifically between 2.14 and 3.1

[[upgrade-architecture]]
==== Supported Installation Scenarios for Upgrading

There are two supported scenarios for upgrading:

* Separate version 2 and version 3 servers
* Both versions of 2 and 3 running on the same server, in different service locations

[[upgrade-file-systems]]
==== File System Considerations

While discussed in greater detail in <<admin-repository-blobstores,Chapter 4>>, {nxrm} 3.x does allow you to
create new blob stores and determine the amount of space for each, if more than one exists. However, it is
important to consider how you want to organize this storage mechanism, and the differences in previous versions
of {nxrm}.

When upgrading, make sure you have enough storage capacity in the destination file system(s). For instance, if you
are using the hard linking <<upgrade-methods,method>>, the bytes themselves are not duplicated (saving space),
but you must ensure there are enough free inodes for the content you want to transfer during upgrade.

Finally, if you have configured your repository manager HTTP context, and path as a reverse proxy server,
the traffic coming from version 2 could be busy as you start the upgrade steps. 

NOTE: HTTP download ingestion puts more load on your version 2 instance than other ingestion methods, because 
this method requires version 2 to serve all of the content. Copying and hard linking only have to be told where 
the file is, and they obtain it from the file system, directly.

[[upgrade-methods]]
==== Upgrade Methods

In order to start an upgrade, version 2 has to listen for version 3 to initiate communication. This is the core
property of the 'Upgrade: Agent'. When the upgrade wizard in version 3 helps you build an upgrade plan, it
talks to your version 2 instance through the upgrade-agent to find out what repositories exist (e.g. to list
them in the wizard user interface). When you pick them, version 3 tells version 2 to start compiling a full list
of what it has that needs replicating in each of those repositories. Ultimately, this creates a scheduled task
that walks through the repository storage folder, lists the files, then synchronizes them, storing the metadata
in the changelog database.

On the version 3 side, components are stored as blobs. The conversion process requires version 3 to iterate over 
every component in your storage.

Once the 'Upgrade: Agent' capability, mentioned in <<upgrade-start>>, is enabled and both repository
manager instances are stood up and communicating, you can consider one of three ingestion methods: HTTP download,
file system copying, or hard linking. The choice of ingestion method can be made on a repository-by-repository
basis, but there is an upgrade-wide default.

////
Expand on what types of architectures might benefit from the listed options
////

*HTTP Downloading*

HTTP downloading is an ingestion method in which version 3 will make HTTP requests to version 2. This is the 
slowest option for upgrading.

If {nxrm} 2.x and {nxrm} 3.x are on different machines and do not share access to the same file system storage, 
you must use the HTTP download method.

*File System Copying*

If versions 2 and 3 are on the same machine (or share access to the same file systems) then version 3 will 
copy the files from version 2. Version 2 will tell version 3 the location of the file and where to retrieve the 
content. 

This option will work if versions 2 and 3 are on the same machine, and configured in a way that the mounts are
accessible by the same path (from one machine to the other), this option will work. It is a slightly faster
process than the download method, and has less impact on the performance of version 2.

*Hard Linking*

This method only works on the same file system. If you want to hard link, configure your instance of version 3 in 
such a way that you have a blob store defined in an appropriate location where hard linking is possible.

This is the fastest option because you will not have to move the bytes around.

[[upgrade-performance]]
==== Performance and Tuning

When considering upgrade time and speed, take into account all enabled scheduled tasks and additional settings on 
your version 2 instance that you may not need. Depending on your configuration of version 2 you could optimize 
the performance of you upgrade by either turning off or deleting obsolete content and tasks. As discussed in the 
https://support.sonatype.com/hc/en-us/articles/213465138-How-can-I-configure-Nexus-to-reduce-disk-space-[article 
about performance and tuning for {nxrm} 2], identify then reduce your list of tasks in version 2 to 
improve the speed of your repository manager. See some highlights, below:

* *System feeds* - If your organization does not rely on system feeds, often used for team communication, 
learn how to 
https://support.sonatype.com/hc/en-us/articles/213464998-How-to-disable-the-System-Feeds-nexus-timeline-plugin-feature-to-improve-Nexus-performance[disable] them within your timeline plugin file
* *Repair index tasks* - These task support search in the repository manager user interface. Since these tasks do not need to be rebuilt that often, consider disabling them across all repositories
* *Snapshot removal tasks* - Enable both 'Remove Snapshots from Repository' and 'Remove Unused Snapshots From Repository', which deletes old component states no longer needed
* *Repositories no longer supported by the {nxrm}* - Remove any deprecated repositories, or other content. For example, if your repository manager contains any Maven 2 proxy repository with the domain name 'codehaus.org' 
should be deleted. See
https://support.sonatype.com/hc/en-us/articles/217611787-codehaus-org-Repositories-Should-Be-Removed-From-Your-Nexus-Instance[Codehaus repositories], for more information
* *'Rebuild Maven Metadata Files'* - This scheduled task should only be run if you need to repair a corrupted 
Maven repository storage on disk. If run infrequently, you can disable it completely to reserve more space needed 
for your upgrade
////
* Reviewing the Custom Metadata capability (when enabled)
////

To help you make deeper decisions around reducing scheduled tasks to improve the performance of your upgrade, see 
the knowledge base article https://support.sonatype.com/hc/en-us/articles/213465208-What-do-the-scheduled-tasks-in-Nexus-do-and-how-often-should-I-run-them-['What do the scheduled tasks in Nexus do, and how often should I run them?'].

[[upgrade-security]]
==== Understanding Security for Upgrades from {nxrm} 2.14 to 3.1

During the upgrade from {nxrm} 2.14 to 3.1 

*{nxrm} 2 Roles*
Roles upgraded from {nxrm} 2 will be assigned a Role ID that starts with `nx2-` (privileges) in {nxrm} 3. 
Role descriptions created during the upgrade process will have the word (legacy) in their description.

*{nxrm} 2 Repository Targets*
Repository targets from {nxrm} 2 will be converted to content selectors in {nxrm} 3. In contrast to repository 
targets, which rely on regular expressions for user permissions, content selectors use a syntax called JEXL 
perform similar restrictions.  Content selector do not contain special characters, therefore the upgrade process 
will replace adjacent unsupported characters with underscores (`_`). For example, a repository target in version 
2 named “All (Any Repository)” will be converted to a selector permission named “All_Any_Repository” in version 3.

[[upgrade-start]]
=== Starting the Upgrade

After considerations around system performance and storage are taken into account, there are a few basic steps 
to start the upgrade:

* Upgrade the {nxrm} 2.x to version 2.14 or higher (see <<upgrade-version-two>>).
* Configure the upgrade capability that allows you to synchronize that instance with {nxrm} 3.1 or later.
* Run 2.14 or later on one server, and version 3.1 or later on another non-conflicting server.
* Configure the upgrade-agent in version 2 and start the upgrade wizard in version 3.

{nxrm} 3.1 provides a tool to instruct you through upgrading in three phases:

 * 'Preparing', the phase that prepares the transfer and creation of all components.
 * 'Synchronizing', the phase that counts and processes all components set to upgrade.
 * 'Finishing', the phase that performs final clean up, then closes the process.

To execute the upgrade plan you must open the connection between version 2 and 3. The connection finds what 
repositories and configurations exist and lists them in the upgrade wizard. It enables the port you configured to 
run version 2 remotely in order to communicate with version 3. The upgrade plan, as a whole, is a two-part 
process where version 2 must be set up to listen for a version 3 instance in order for the former to talk to the 
latter.

[[upgrade-configuration]]
==== Enabling Upgrade in Version 2

In version 2, activate the 'Upgrade: Agent' capability to open the connection for the upgrade-agent. Follow
these steps:

* Click 'Administration' in the left-hand panel
* Open the 'Capabilities' screen
* Select 'New' to prompt the 'Create new capability' modal
* Select 'Upgrade: Agent' as your capability 'Type'
* Click 'Add' to close the modal

In the lower section of the 'Capabilities' interface, the repository manager acknowledges the upgrade-agent as
'Active'.

[[upgrade-plan]]
==== Enabling Upgrade in Version 3

Next, sign in to your version 3 instance. You will create a 'Upgrade' capability to enable the feature. When
enabled, the 'Upgrade' item appears in the 'Administration' menu, under 'System'. Follow these steps to
activate the capability:

* Click 'System', to open the 'Capabilities' screen
* Click 'Create capability'
* Select 'Upgrade', then click 'Create capability' to enable the upgrade

[[upgrade-content]]
==== Upgrading Content

After you establish upgrade capabilities for versions 2 and 3, you will activate the wizard to start your
upgrade. In version 3 go to the 'Administration' menu and select 'Upgrade', located under 'System', to
open the wizard.

Overview:: The tool provides an overview of what is allowed for an upgrade as well as warnings on what 
cannot be upgraded.

Agent Connection:: This screen presents two fields, 'URL' and 'Access Token'. The 'URL' field should contain the
base URL (including context path) of your version 2 server (e.g. +http://localhost:8081/nexus/+). The 'Access
Token' field should contain the security key from your version 2 'Upgrade: Agent' capability details.

Content:: This screen displays checkboxes for compatible component formats ('Repositories'), security features 
('Security'), and server configuration ('System'). For 'Repositories' you can select 'User-Managed Repositories', 
'Repository Targets', and 'Health Check'. For 'Security' you can choose from 'Anonymous', 'LDAP Configuration', 
'NuGet API-Key', 'Realms', 'Roles', 'SSL Certificates', 'Target Privileges', 'Users', 'Crowd', and 'User Tokens'. 
For 'System' you can select 'Email', 'HTTP Configuration', and 'IQ Server' configurations.

NOTE: Repository targets, which use regular expressions to match and filter specific content will upgrade to JEXL 
syntax, used for <<content-selectors,content selectors>>.

Repository Defaults:: If 'User-Managed Repositories' is one of your selections from the 'Content' screen, the 
'Repository Defaults' screen allows you to select directory destination and upgrade method. The first dropdown 
menu, 'Destination' gives your option to pick a blob store name different than the default. The second dropdown
menu, 'Method', allows you to choose among hard linking, copying local files or downloading. This section allows 
you to click and change each repository's individual method and destination (i.e. blob store).

Repositories:: If 'User-Managed Repositories' is one of your selections from the 'Content' screen, the 
'Repositories' screen allows you to select which repositories you want to upgrade. You can either select all 
repositories with one click, at the top of the table. Alternatively, you can click each individual repository. In 
addition to 'Repository', the table displays information around the status of the repository.

Preview:: This table displays a preview of the content set for upgrade, selected in the previous screens. 
Click 'Begin', then confirm from the modal, that you want to start the upgrade. After the preview 'Preparing', 
'Synchronizing', and 'Finishing' will follow.

When the final content upgrade ends, go to your version 3 instance to see all your content replicated there.

[[upgrade-repositories]]
=== Repository Feature Support of Upgrade
In addition, the following items and settings should b

*Repository IDs*

Before upgrading repositories to version 3, find the repository IDs in version 2 and plan how you will 
rename any conflicting repositories in version 3. Contact our https://support.sonatype.com/hc/en-us[support
team] to learn on how to do this safely.

*Repository Groups*

Review the contents of your repository groups. If empty, the upgrade plan will not permit transfer, as validation 
will fail.

*User Tokens*

The upgrade tool can only replicate pre-existing user tokens from version 2 to 3 if the 'Enabled' box in version 
2 is checked. In version 2, click the 'User Token' tab, in the 'Administration' menu, and enable the setting. 

*Repository Health Check and SSL Health Check*

You can include both your existing {rhc} and its corresponding SSL trust store configuration when you upgrade 
from 2.14 to 3.1. If you are a {oss} user you only have the ability to upgrade your settings from the 
'Health Check: Configuration' capability. If you run {pro}, you can also upgrade your existing 'SSL: Health 
Check' settings in version 2 to version 3. After the upgrade is complete settings for both 'Health Check: 
Configuration' and 'SSL: Health Check' capabilities will be enabled in version 3, as they were in version 2.

*Repository Targets and Target Privileges*

If upgrading your Repository Targets from 2.14 to version 3.1, it is recommended you also upgrade your Target 
Privileges and vice versa.  If you do not upgrade both, you may find that you need to make further adjustments to 
version 3 configuration to have things work as they did in version 2.

*NuGet API Key*

The upgrade tool will add all keys to {nxrm} 3.1 that are present in {nxrm} 2.14 when asked, even if the version 
2 NuGet API Key Realm is not active. This is because there is no explicit on or off setting for NuGet keys.

////
NO IQ Server capability in 3.1

*IQ Server*

{inrmonly}

If upgrading {iq} settings and configuration, ensure that your licenses include the integration for both versions 
2 and 3. Your configuration for 'IQ Server URL', 'Username', 'Password', and 'Request Timeout' will be included 
in the upgrade. Additional configuration, such as analysis properties, trust store usage, and the enabled {iq} 
connection itself will be replicated from versions 2 to 3.
////