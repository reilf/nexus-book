[[upgrading]]
==  Upgrading {nxrm} to 3.1 or Later
{inall}

[[upgrade-introduction]]
=== Introduction

{nxrm} 3 represents a shift in design that now supports a wider set of features requested by customers, as well
as a platform for a modern, expanded set of functionality still to come. Given these changes, many to the core
architecture, the upgrade process requires more attention than in previous versions.

In this chapter, we've isolated the most common path for the upgrade process from {nxrm} version 2.14 (or later) 
to 3.1 (or later) only. To help facilitate this process, capabilities have been added in both version 2.14 (or 
later) and 3.1 (or later). Where appropriate we have also highlighted other upgrade paths for previous versions 
as well. However, it's important to keep in mind that there may be specific items unique to your installation and 
upgrade needs. For specific help outside this more standard path, please consult Sonatype's link:https://support.sonatype.com/hc/en-us/sections/204911768-Installation-Upgrade-and-Compatibility[Support  Knowledge Base (KB) articles], or contact support directly (available for {pro} customers).

[[why-upgrade]]
=== Why Upgrade?

As of version 3.1 (or later) there is now wider feature and functionality equivalency to {nxrm} 2.
Highlights of new functionality available in version 3.1 (or later) include:

////
* Component Fabric (High Availability)
////
* Expanded Format Support
* Enhanced Metadata

Of course, the choice to upgrade ultimately depends on the features your team is using today. In
many cases upgrading to version 3.1 (or later) provides an enhanced set of features to support modern development practices and automation. However, it is a good idea to review Sonatype's support site to compare link:https://support.sonatype.com/hc/en-us/articles/226495428-Nexus-Repository-Manager-Format-Language-Support[format support], link:https://support.sonatype.com/hc/en-us/articles/226489388-Nexus-Repository-Manager-2-x-to-3-x-Feature-Equivalency[feature equivalency], and link:[compatibility across versions].

[[upgrade-types]]
=== Upgrading Specific Versions of {nxrm} to Version 3.1 (or later)

Upgrading from {nxrm} 2 to 3 requires version 2.14 (or later) and version 3.1 (or later). To upgrade from an
older version, refer to the specific sections below.

[[upgrade-version-two]]
==== Upgrading from 2.x to 2.14 (or later)

If you have a version of 2.x that is not 2.14 (or later), you must upgrade before starting the upgrade to {nxrm}
3. This requires that you first redirect the contents of the existing instance to a newly downloaded version of 
the latest instance (2.14 or later). See this link:https://support.sonatype.com/hc/en-us/articles/213464198-How-do-I-upgrade-Nexus-[article] for instructions.

[[upgrade-version-three]]
==== Upgrading from Milestone 7 release to 3.1 (or later)

Upgrading to the latest version of {nxrm} 3 can only be performed by users who have updated to the version 3
milestone 7 release, and then on to the latest the latest version of {nxrm} 3. This is a manual process, and
there are two ways to upgrade milestone releases to newer version: with the installer application or the
distribution file.

Before execution of this type of upgrade, be sure to manually back up the milestone 7 data directory to another
location. This is a crucial step when upgrading to newer versions. Follow the steps in the support
https://support.sonatype.com/hc/en-us/articles/217967608[knowledge base article].

[[upgrade-process-expectations]]
=== Upgrade Process and Expectations

The process of upgrading {nxrm} 2 to 3, is similar to any major enterprise application, and should be managed via
an upgrade plan. The upgrade plan is really just a specific checklist of all the steps required to perform
the upgrade from version 2.14 (or later) to 3.1 (or later).

While the upgrade process is underway, you can continue to use version 2.14 (or later). Any repository content
that’s added, updated, or deleted is picked up by version 3.1 (or later). However, configuration changes are not.

You should not make changes to items such as realm settings, permissions, roles, role assignments, HTTP
configuration, SSL certificates, or add new repositories. These types of configuration changes can cause the
upgrade process to fail.

[[upgraded]]
==== What Is Upgraded

As mentioned, {nxrm} 3 represents a modern design shift, involving a new architecture that supports advanced 
features for today's development practices. As such, a number of core changes to data stored in version 3.1 (or 
later) occur as part of the upgrade process. This includes:

* *Component Storage Format (Files to Blobs)* - Components (artifacts) in {nxrm} 2 are stored as individual files
  on disk. Version 3 stores components as <<admin-repository-blobstores,blobs>>. The conversion process requires
  version 3 to iterate over every component stored in version 2. This takes the bulk of the time required for
  the upgrade process.
* *Settings and Metadata* - Settings and some component metadata in {nxrm} 2 are stored across many files.
  Conversely, {nxrm} 3 loads equivalent settings into an link:http://http://orientdb.com/[OrientDB] database.

[[not-upgraded]]
==== What Is Not Upgraded

The file structures within your repository manager environment will differ between version 2.14 (or later) and
3.1 (or later). Before <<upgrade-prep,preparing>> for the upgrade process, review this list of settings and 
configuration items. The following list of items are not automatically included when you upgrade.

* custom branding
* virtual repositories
* Java VM Settings, including custom system properties or variables
* operating system `nexus` service scripts
* operating system optimizations, such as increasing allowable open file handles
* environment variables affecting values used to control the repository manager
* third-party or custom-developed plugins
* Jetty Server XML configuration files
* link:https://support.sonatype.com/hc/en-us/articles/226495428-Nexus-Repository-Manager-Format-Language-Support[unimplemented repository formats]
* manual edits to other files under the `nexus` installation directory, such as edits to
  `nexus/WEB-INF/classes/ehcache.xml`
* custom log levels or edits to `logback.xml` configuration files (e.g. custom log file rotation, file naming, log patterns)

[[upgrade-repo-support]]
==== Repository Format Support

{nxrm} 3 supports an expanded number of repository formats. For a complete list of supported formats in version 2
and version 3, see the knowledge base article, “Nexus Repository Manager Format / Language Support.” During the
upgrade process from version 2.14 (or later) to 3.1 (or later), the following repository formats are included:

* npm
* NuGet
* Site/Raw
* Maven2
////
* RubyGems
////

[[upgrade-prep]]
=== Designing Your Upgrade Plan

When upgrading, the most critical decisions you need to make about an upgrade plan are:

* Identification of a maintenance window for version 2.14 (or later), allowing the upgrade to proceed without
  interruption
* Selection of an <<upgrade-architecture,installation scenario>> that best supports your upgrade plan
* Selection of an <<upgrade-methods,upgrade method>>
* Procurement of required <<upgrade-file-systems,system storage>>, as well as location for content to be 
transferred to
* Identification of <<upgrade-support,configurations>> that may result in failure, and prevent upgrade of certain 
components
* Review of <<upgrade-security,security settings>>, and associated differences between version 2.14 (or later) 
and 3.1 (or later)
* Consider ways to improve <<upgrade-performance,Optimization, Performance, and Tuning>>

[[upgrade-architecture]]
==== Supported Installation Scenarios for Upgrading

There are two supported scenarios for upgrading:

* Separate servers for version 2.14 (or later) and 3.1 (or later)
* Both versions of 2.14 and 3.1 running on the same server, but in different install directories

//// 
Begs the question if there are unsupported, or something we can add here to preven support questions.
////

[[upgrade-methods]]
==== Upgrade Methods

An upgrade method specifies the way in which data from version 2.14 (or later) is sent to, and upgraded by,
version 3.1 (or later). Access to available upgrade functionality, including the upgrade method options, is made
possible by specific upgrade capabilities ('Upgrade: Agent' and 'Upgrade', respecitvely) in both version 2.14 (or
later) and 3.1 (or later). In addition, an upgrade tool is provided in version 3.1 (or later) to assist in
isolating what will be upgraded. Once the upgrade capabilities are enabled, and both repository manager instances
are communicating, you can use the upgrade tool to choose one of three methods to transfer your content:


////
Expand on what types of architectures might benefit from the listed options
////

*HTTP Downloading*

HTTP downloading is an upgrade method in which version 3.1 (or later) makes HTTP requests to version 2.14 (or
later). This is the slowest option for upgrading.

If version 2.14 (or later) and 3.1 (or later) are on different machines and do not share access to the same file
system storage, you must use the HTTP downloading method.

*File System Copying*

In this upgrade method, version 2.14 (or later) tells version 3.1 (or later) the location of the file and
where to retrieve the content.

This upgrade method works if versions 2.14 (or later) and 3.1 (or later) are on the same machine, and configured
in a way that the mounts are accessible by the same path (from one machine to the other). It is a slightly faster
process than the HTTP Download method, and has less impact on the performance of version 2.14 (or later).

*Hard Linking*

This upgrade method will only work on the same {nxrm} filesystem in place. This means you must have configured
your instance of version 3.1 (or later) in such a way that you have a blob store defined in an appropriate
location where hard linking is possible.

This is the fastest option because you will not have to move the bytes around.

////
We should say what this method is, similar to the others. It lacks some detail, especially about how one would
convert from 2.14 (or later) file system to the 3.1 (or later) blob store.

Hard linking is simply a different name for the same inode (files are internally referenced by inodes).
////

NOTE: The HTTP downloading method puts more load on your version 2.14 (or later) instance than other methods,
because this method requires version 2.14 (or later) to serve all of the content. Copying and hard linking only
have to be told where the file is, and they obtain it from the file system, directly.

[[upgrade-file-systems]]
==== File System Considerations

While discussed in greater detail in <<admin-repository-blobstores,Chapter 4>>, {nxrm} 3 allows you to create and
name multiple blob stores to store your content. Before you start the upgrade process it is important to consider
how you want to identify space within the storage mechanism.

When upgrading, make sure you have enough storage capacity in the destination file system(s). For instance, if you
are using the hard linking <<upgrade-methods,method>>, the bytes themselves are not duplicated (saving space),
but you must ensure there are enough free inodes for the content you want to transfer during the upgrade process.

Finally, if you have configured your repository manager HTTP context and path as a reverse proxy server,
the traffic coming from version 2.14 (or later) could be busy as you start the upgrade steps. 

[[upgrade-support]]
==== Configuration Details for Upgrading

Due to fundamental changes in file structure between {nxrm} 2 and 3, you should review and compare the
configuration details to prevent any failures.

*Repository IDs*

Before upgrading repositories to version 3.1 (or later), find the repository IDs in version 2.14 (or later) and
plan how you will rename any conflicting repositories in version 3.1 (or later). Your repository IDs in version
2.14 (or later) may differ by letter case. This means you may have to edit the IDs, manually, before the upgrade 
process. 

////
Contact link:https://support.sonatype.com/hc/en-us[Sonatype support] to learn on how to do this safely.
////

*Repository Groups*

Review the contents of your repository groups in version 2.14 (or later) to ensure its contents are selected for
upgrade. A single component within the group, not selected, may prevent the entire group from being upgraded to
3.1 (or later).

////
WIP
https://issues.sonatype.org/browse/NEXUS-10601
////

*User Tokens*

The upgrade tool can only replicate pre-existing user tokens from version 2.14 (or later) to 3.1 (or later) if
the 'Enabled' box in version 2.14 (or later) is checked. In version 2.14 (or later), click the 'User Token' tab,
in the 'Administration' menu, and enable the setting.

*Repository Health Check and SSL Health Check*

You can include both your existing {rhc} and its corresponding SSL trust store configuration when you upgrade
from version 2.14 (or later) to 3.1 (or later). If you are a {oss} user you only have the ability to upgrade your
settings from the 'Health Check: Configuration' capability. If you are a {pro} user, you can also upgrade your
existing 'SSL: Health Check' settings from version 2.14 (or later) to 3.1 (or later). After the upgrade process is
complete, settings for both 'Health Check: Configuration' and 'SSL: Health Check' capabilities are enabled in
version 3.1 (or later), as they were in version 2.14 (or later).

*NuGet API Key*

The upgrade tool will add all keys to version 3.1 (or later) that are present in version 2.14 (or later) when
asked, even if the version 2.14 (or later) NuGet API Key Realm is not active. This is because there is no
explicit on or off setting for NuGet keys.

////
NO IQ Server capability in 3.1

*IQ Server*

{inrmonly}

If upgrading {iq} settings and configuration, ensure that your licenses include the integration for both versions 
2 and 3. Your configuration for 'IQ Server URL', 'Username', 'Password', and 'Request Timeout' will be included 
in the upgrade. Additional configuration, such as analysis properties, trust store usage, and the enabled {iq} 
connection itself will be replicated from versions 2 to 3.
////

[[upgrade-security]]
==== Security Compatibility from 2.14 (or later) to 3.1 (or later)

Before you upgrade from version 2.14 (or later) to 3.1 (or later) review the differences in security settings
along the upgrade path. Known changes may affect roles and repository targets, that latter of which will no
longer exist in {nxrm} 3.

*Version 2.14 (or later) Roles*

Roles upgraded from version 2.14 (or later) will be assigned a Role ID that starts with `nx2-` in {nxrm} 3. Role 
descriptions created during the upgrade process will have the word (legacy) in their description.

*Version 2.14 (or later) Repository Targets*

If upgrading your Repository Targets from version 2.14 (or later) to 3.1 (or later), it is recommended you also
upgrade your Target Privileges and vice versa. If you do not upgrade both, you may find that you need to make
further adjustments to version 3.1 (or later) configuration to have things work as they did in version 2.14 (or
later).

Repository targets from version 2.14 (or later) are converted to content selectors in version 3.1 (or later).
In contrast to repository targets, which rely on regular expressions for user permissions, content selectors use
a syntax called JEXL to perform similar restrictions. If characters are not translatable, the upgrade process
replaces unsupported characters with underscores (`_`). For example, a repository target in version 2.14 (or
later) named 'All (Any Repository)' will be converted to a selector permission named 'All_Any_Repository' in
version 3.1 (or later).

[[upgrade-performance]]
==== Optimization, Performance, and Tuning

When considering upgrade time and speed, take into account all enabled scheduled tasks and additional settings
that you may not need on your version 2.14 (or later) instance. Depending on your configuration of version 2.14
(or later) instance, you could optimize the performance of your upgrade by either turning off tasks not used or
deleting obsolete content. As discussed in this link:https://support.sonatype.com/hc/en-us/articles/213465138-How-can-I-configure-Nexus-to-reduce-disk-space-[article about performance and tuning for {nxrm} 2], identify then reduce your list of tasks in version 2.14 (or 
later) to improve the speed of your repository manager. Some highlights from the article are provided below:

* *System feeds* - If your organization does not rely on system feeds, often used for team communication, 
learn how to 
https://support.sonatype.com/hc/en-us/articles/213464998-How-to-disable-the-System-Feeds-nexus-timeline-plugin-feature-to-improve-Nexus-performance[disable] them within your timeline plugin file.
* *Repair index tasks* - These task support search in the repository manager user interface. Since these tasks do
  not need to be rebuilt that often, consider disabling them across all repositories.
* *Snapshot removal tasks* - Enable both 'Remove Snapshots from Repository' and 'Remove Unused Snapshots From
  Repository', which deletes old component states no longer needed. 
* *Repositories no longer supported by the {nxrm}* - Remove any deprecated repositories, or other content. For
   example, if your repository manager contains any Maven 2 proxy repository with the domain name 'codehaus.org'
   should be deleted. See https://support.sonatype.com/hc/en-us/articles/217611787-codehaus-org-Repositories-Should-Be-Removed-From-Your-Nexus-Instance[Codehaus repositories], for more information.
* *'Rebuild Maven Metadata Files'* - This scheduled task should only be run if you need to repair a corrupted
  Maven repository storage on disk. If run infrequently, you can disable it completely to reserve more space
  needed for your upgrade.
* *Staging rules* - If you are a {pro} user that use the application for staging releases, redefine or reduce the
  number of configured rules to free up space.
* *Scheduled task for releases* - If you find empty 'Use Index' checkboxes under 'Task Settings', use the
  opportunity to disable or remove those specific tasks for releases.
* *Smart Proxy Preemptive Fetch* - The most notable performance benefit is that hidden caches are utilized more
  efficiently.

////
* Reviewing the Custom Metadata capability (when enabled)
////

To help you decide how to reduce scheduled tasks, improving the performance of your upgrade, see 
the knowledge base article https://support.sonatype.com/hc/en-us/articles/213465208-What-do-the-scheduled-tasks-in-Nexus-do-and-how-often-should-I-run-them-['What do the scheduled tasks in Nexus do, and how often should I run them?'].

[[upgrade-start]]
=== Starting the Upgrade

After you've designed your upgrade plan, considered system performance, and assessed storage needs, there are a 
few basic steps to start the upgrade:

. Upgrade the your existing version 2.x to 2.14 (or later) (see <<upgrade-version-two>>).
. Enable the upgrade capabilities in both version 2.14 (or later) and 3.1 (or later) that allow you to
  synchronize that instance between versions.

With the above complete, you can now use the provide upgrade tool in version 3.1 (or later), which will instruct
you through upgrading in three phases:

. 'Preparing', the phase that prepares the transfer and creation of all components.
. 'Synchronizing', the phase that counts and processes all components set to upgrade.
. 'Finishing', the phase that performs final clean up, then closes the process.

[[upgrade-configuration]]
==== Enabling the Upgrade Capability in Version 2.14 (or later)

In version 2.14 (or later), enable the 'Upgrade: Agent' capability to open the connection for the upgrade-agent.
Follow these steps:

. Click 'Administration' in the left-hand panel
. Open the 'Capabilities' screen
. Select 'New' to prompt the 'Create new capability' modal
. Select 'Upgrade: Agent' as your capability 'Type'
. Copy and save the 'Access Token' (you'll need it for the 'Upgrade' tool in 3.1)
. Click 'Add' to close the modal

In the lower section of the 'Capabilities' interface, the repository manager acknowledges the upgrade-agent as
'Active'.

[[upgrade-plan]]
==== Enabling the Upgrade Capability in Version 3.1 (or later)

In version 3.1 (or later), enable the 'Upgrade' capability to open the connection for the upgrade-agent, and
access the 'Upgrade' tool. Follow these steps:

. Click 'System', to open the 'Capabilities' screen
. Click 'Create capability'
. Select 'Upgrade', then click 'Create capability' to enable the upgrade


[[upgrade-content]]
==== Upgrading Content

After you enable upgrade capabilities for versions 2.14 (or later) and 3.1 (or later), access the upgrade tool to
start your upgrade.

. Go to the 'Administration' menu 
. Select 'Upgrade' Located under 'System' to open the wizard.

Overview:: The upgrade tool provides an overview of what is allowed for an upgrade as well as warnings on what 
cannot be upgraded.

Agent Connection:: This screen presents two fields, 'URL' and 'Access Token'. Follow these steps: 

. In the 'URL' field, enter the base URL (including context path) of your version 2.14 (or later) server (e.g. 
+http://localhost:8081/nexus/+).
. In the 'Access Token' field, enter the security key, copied from your version 2.14 (or later) 'Upgrade: Agent'
capability 'Settings'.

Content:: This screen displays checkboxes for compatible component formats ('Repositories'), security features 
and configurations ('Security'), and server configuration ('System'). For 'Repositories' you can select 
'User-Managed Repositories', 'Repository Targets', and 'Health Check'. For 'Security' you can choose from
'Anonymous', 'LDAP Configuration', 'NuGet API-Key', 'Realms', 'Roles', 'SSL Certificates', 'Target Privileges', 
'Users', 'Crowd', and 'User Tokens'. For 'System' you can select 'Email', 'HTTP Configuration', and 'IQ Server' 
configurations.

////
Might be worth making this a list.
////

NOTE: Repository targets, which use regular expressions to match and filter specific content will upgrade to JEXL 
syntax, used for <<content-selectors,content selectors>>.

Repository Defaults:: If 'User-Managed Repositories' is one of your selections from the 'Content' screen, the 
'Repository Defaults' screen allows you to select directory destination and upgrade method. The first dropdown 
menu, 'Destination' gives your option to pick a blob store name different than the default. The second dropdown
menu, 'Method', allows you to choose among hard linking, copying local files or downloading. This section allows 
you to click and change each repository's individual method and destination (i.e. blob store).

Repositories:: If 'User-Managed Repositories' is one of your selections from the 'Content' screen, the 
'Repositories' screen allows you to select which repositories you want to upgrade. You can either select all 
repositories with one click, at the top of the table. Alternatively, you can click each individual repository. In 
addition to 'Repository', the table displays information around the status of the repository.

Preview:: This table displays a preview of the content set for the upgrade, selected in the previous screens. 
Click 'Begin', then confirm from the modal, that you want to start the upgrade process. After the preview 
'Preparing', 'Synchronizing', and 'Finishing' will follow.

When the upgrade process completes, your content is replicated for you to view. Click the Browse button
image:figs/web/ui-browse-button-icon.png[scale=50] in the main toolbar to access all content upgraded from 
version 2.14 (or later) to 3.1 (or later).